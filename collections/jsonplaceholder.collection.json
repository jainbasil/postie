{
  "collection": {
    "info": {
      "name": "JSONPlaceholder API",
      "description": "Sample API collection for testing JSONPlaceholder endpoints",
      "version": "1.0.0",
      "schema": "https://postie.dev/collection/v1.0.0/collection.json",
      "author": "Postie Team"
    },
    "variable": [
      {
        "key": "timeout",
        "value": 30000,
        "type": "number",
        "description": "Default request timeout in milliseconds"
      },
      {
        "key": "userAgent",
        "value": "Postie/1.0.0",
        "type": "string",
        "description": "Default user agent"
      }
    ],
    "environment": [
      {
        "name": "JSONPlaceholder",
        "description": "Official JSONPlaceholder API",
        "values": [
          {
            "key": "baseUrl",
            "value": "https://jsonplaceholder.typicode.com",
            "type": "string",
            "enabled": true
          },
          {
            "key": "timeout",
            "value": 10000,
            "type": "number",
            "enabled": true,
            "description": "Faster timeout for reliable service"
          }
        ],
        "auth": {
          "type": "noauth"
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "type": "text/javascript",
              "exec": [
                "// JSONPlaceholder - public API",
                "console.log('Using JSONPlaceholder public API');"
              ]
            }
          }
        ]
      },
      {
        "name": "Local Development",
        "description": "Local development server",
        "values": [
          {
            "key": "baseUrl",
            "value": "http://localhost:3000",
            "type": "string",
            "enabled": true
          },
          {
            "key": "timeout",
            "value": 60000,
            "type": "number",
            "enabled": true,
            "description": "Longer timeout for local debugging"
          },
          {
            "key": "debugMode",
            "value": true,
            "type": "boolean",
            "enabled": true
          }
        ],
        "auth": {
          "type": "apikey",
          "apikey": [
            {
              "key": "key",
              "value": "X-API-Key",
              "type": "string"
            },
            {
              "key": "value",
              "value": "dev-api-key-12345",
              "type": "string"
            },
            {
              "key": "in",
              "value": "header",
              "type": "string"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "type": "text/javascript",
              "exec": [
                "// Local development setup",
                "console.log('Running against local development server');",
                "if (pm.environment.get('debugMode')) {",
                "    pm.request.headers.add({",
                "        key: 'X-Debug-Mode',",
                "        value: 'true'",
                "    });",
                "}"
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "type": "text/javascript",
              "exec": [
                "// Relaxed tests for development",
                "pm.test('Response time is acceptable for dev', function () {",
                "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                "});"
              ]
            }
          }
        ]
      },
      {
        "name": "Testing",
        "description": "Testing environment with mock data",
        "values": [
          {
            "key": "baseUrl",
            "value": "https://api-test.example.com",
            "type": "string",
            "enabled": true
          },
          {
            "key": "timeout",
            "value": 15000,
            "type": "number",
            "enabled": true
          },
          {
            "key": "useMockData",
            "value": true,
            "type": "boolean",
            "enabled": true
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "test-bearer-token-xyz",
              "type": "string"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "type": "text/javascript",
              "exec": [
                "// Testing environment setup",
                "pm.request.headers.add({",
                "    key: 'X-Test-Mode',",
                "    value: 'true'",
                "});",
                "",
                "if (pm.environment.get('useMockData')) {",
                "    pm.request.headers.add({",
                "        key: 'X-Use-Mock-Data',",
                "        value: 'true'",
                "    });",
                "}"
              ]
            }
          }
        ]
      }
    ],
    "auth": {
      "type": "noauth"
    },
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "type": "text/javascript",
          "exec": [
            "// Set timestamp for request tracking",
            "pm.collectionVariables.set('requestTimestamp', Date.now());"
          ]
        }
      },
      {
        "listen": "test",
        "script": {
          "type": "text/javascript",
          "exec": [
            "// Common test for all requests",
            "pm.test('Response time is acceptable', function () {",
            "    pm.expect(pm.response.responseTime).to.be.below(5000);",
            "});",
            "",
            "pm.test('Status code is not 5xx', function () {",
            "    pm.expect(pm.response.code).to.be.below(500);",
            "});"
          ]
        }
      }
    ],
    "apiGroup": [
      {
        "id": "posts",
        "name": "Posts",
        "description": "Post-related operations",
        "environment": [
          {
            "name": "JSONPlaceholder",
            "values": [
              {
                "key": "postsEndpoint",
                "value": "/posts",
                "type": "string",
                "enabled": true
              }
            ]
          },
          {
            "name": "Local Development",
            "values": [
              {
                "key": "postsEndpoint",
                "value": "/api/posts",
                "type": "string", 
                "enabled": true
              }
            ]
          },
          {
            "name": "Testing",
            "values": [
              {
                "key": "postsEndpoint",
                "value": "/mock/posts",
                "type": "string",
                "enabled": true
              }
            ]
          }
        ],
        "apis": [
          {
            "id": "get-all-posts",
            "name": "Get All Posts",
            "description": "Retrieve all posts from the API",
            "request": {
              "method": "GET",
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json",
                  "type": "text"
                }
              ],
              "url": {
                "raw": "{{baseUrl}}{{postsEndpoint}}",
                "host": ["{{baseUrl}}"],
                "path": ["{{postsEndpoint}}"]
              }
            },
            "response": [
              {
                "name": "Success Response",
                "originalRequest": {
                  "method": "GET",
                  "header": [],
                  "url": {
                    "raw": "{{baseUrl}}{{postsEndpoint}}"
                  }
                },
                "status": "OK",
                "code": 200,
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json; charset=utf-8"
                  }
                ],
                "body": "[\n  {\n    \"userId\": 1,\n    \"id\": 1,\n    \"title\": \"sunt aut facere\",\n    \"body\": \"quia et suscipit\"\n  }\n]",
                "responseTime": 245
              }
            ],
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Response is an array', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.be.an('array');",
                    "});",
                    "",
                    "pm.test('Posts have required fields', function () {",
                    "    const jsonData = pm.response.json();",
                    "    if (jsonData.length > 0) {",
                    "        pm.expect(jsonData[0]).to.have.property('id');",
                    "        pm.expect(jsonData[0]).to.have.property('title');",
                    "        pm.expect(jsonData[0]).to.have.property('body');",
                    "        pm.expect(jsonData[0]).to.have.property('userId');",
                    "    }",
                    "});"
                  ]
                }
              }
            ]
          },
          {
            "id": "get-single-post",
            "name": "Get Single Post",
            "description": "Retrieve a specific post by ID",
            "request": {
              "method": "GET",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/posts/1",
                "host": ["{{baseUrl}}"],
                "path": ["posts", "1"]
              }
            },
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Post has correct ID', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData.id).to.eql(1);",
                    "});"
                  ]
                }
              }
            ]
          },
          {
            "id": "create-new-post",
            "name": "Create New Post",
            "description": "Create a new post",
            "request": {
              "method": "POST",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json",
                  "type": "text"
                }
              ],
              "body": {
                "mode": "raw",
                "raw": "{\n  \"title\": \"New Post Title\",\n  \"body\": \"This is the content of the new post\",\n  \"userId\": 1\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "url": {
                "raw": "{{baseUrl}}/posts",
                "host": ["{{baseUrl}}"],
                "path": ["posts"]
              }
            },
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 201', function () {",
                    "    pm.response.to.have.status(201);",
                    "});",
                    "",
                    "pm.test('Response contains created post', function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('id');",
                    "    pm.expect(jsonData.title).to.eql('New Post Title');",
                    "});"
                  ]
                }
              }
            ]
          },
          {
            "id": "update-post",
            "name": "Update Post",
            "description": "Update an existing post",
            "request": {
              "method": "PUT",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json",
                  "type": "text"
                }
              ],
              "body": {
                "mode": "raw",
                "raw": "{\n  \"id\": 1,\n  \"title\": \"Updated Post Title\",\n  \"body\": \"This is the updated content\",\n  \"userId\": 1\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              },
              "url": {
                "raw": "{{baseUrl}}/posts/1",
                "host": ["{{baseUrl}}"],
                "path": ["posts", "1"]
              }
            }
          },
          {
            "id": "delete-post",
            "name": "Delete Post",
            "description": "Delete a post by ID",
            "request": {
              "method": "DELETE",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/posts/1",
                "host": ["{{baseUrl}}"],
                "path": ["posts", "1"]
              }
            },
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});"
                  ]
                }
              }
            ]
          }
        ]
      },
      {
        "id": "users",
        "name": "Users",
        "description": "User-related operations",
        "apis": [
          {
            "id": "get-all-users",
            "name": "Get All Users",
            "description": "Retrieve all users",
            "request": {
              "method": "GET",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/users",
                "host": ["{{baseUrl}}"],
                "path": ["users"]
              }
            },
            "event": [
              {
                "listen": "test",
                "script": {
                  "type": "text/javascript",
                  "exec": [
                    "pm.test('Status code is 200', function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test('Users have required fields', function () {",
                    "    const jsonData = pm.response.json();",
                    "    if (jsonData.length > 0) {",
                    "        pm.expect(jsonData[0]).to.have.property('id');",
                    "        pm.expect(jsonData[0]).to.have.property('name');",
                    "        pm.expect(jsonData[0]).to.have.property('email');",
                    "    }",
                    "});"
                  ]
                }
              }
            ]
          },
          {
            "id": "get-user-by-id",
            "name": "Get User by ID",
            "description": "Retrieve a specific user by ID",
            "request": {
              "method": "GET",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/users/1",
                "host": ["{{baseUrl}}"],
                "path": ["users", "1"]
              }
            }
          }
        ]
      },
      {
        "id": "comments",
        "name": "Comments",
        "description": "Comment-related operations", 
        "apis": [
          {
            "id": "get-comments-for-post",
            "name": "Get Comments for Post",
            "description": "Retrieve comments for a specific post",
            "request": {
              "method": "GET",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/posts/1/comments",
                "host": ["{{baseUrl}}"],
                "path": ["posts", "1", "comments"]
              }
            }
          },
          {
            "id": "get-all-comments",
            "name": "Get All Comments",
            "description": "Retrieve all comments with optional filtering",
            "request": {
              "method": "GET",
              "header": [],
              "url": {
                "raw": "{{baseUrl}}/comments?postId=1",
                "host": ["{{baseUrl}}"],
                "path": ["comments"],
                "query": [
                  {
                    "key": "postId",
                    "value": "1",
                    "description": "Filter comments by post ID"
                  }
                ]
              }
            }
          }
        ]
      }
    ]
  }
}